version: 2.1

#############
# Parameters
#############
parameters:
  run_tests:
    description: Whether to run test suites
    type: boolean
    default: false
  run_matrix:
    description: Whether to run matrix jobs
    type: boolean
    default: false
  deploy:
    description: Whether to initiate deployment
    type: boolean
    default: false
  run_default:
    type: boolean
    default: true
  run_runners_fleet:
    type: boolean
    default: false
  run_workspace_test:
    type: boolean
    default: false

#############
# Executors
#############
executors:
  docker:
    docker:
      - image: cimg/base:2020.01
  linux:
    machine:
      image: ubuntu-1604:202004-01
  macos:
    macos:
      xcode: 11.4
  db-test:
    docker:
      - image: cimg/base:2020.01
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circle_test
          POSTGRES_HOST_AUTH_METHOD: trust

#############
# Orbs
#############
orbs:
  win: circleci/windows@2.4.0

  mvxt-test:
    jobs:
      test-env-interp:
        description: "Testing whether it's possible to interpolate params into env vars"
        docker:
          - image: bash:4.4.19
        environment:
          TEST_VAR_ONE: << parameters.test-var-one >>
        parameters:
          test-var-one:
            description: "Test var one"
            type: string
          test-var-two:
            description: "Test var two"
            type: string
        steps:
          - checkout
          - run:
              command: |
                echo "Echoing parameter interpolated as part of ENV config: $TEST_VAR_ONE"
          - run:
              command: |
                echo "Echoing parameter interpolated into actual run step: << parameters.test-var-two >>"
          - run: sh blah.sh

############
# Workflows
############
workflows:
  version: 2.1
  run-default:
    when: << pipeline.parameters.run_default >>
    jobs:
      - test:
          context:
            - mvxt-prod
            - circle-api

  run-workspace:
    when: << pipeline.parmaeters.run_workspace_test >>
    jobs:
      - workspace-test
  runners-fleet:
    when: << pipeline.parameters.run_runners_fleet >>
    jobs:
      - centos7-amd64
      - centos8-amd64
      - rhel8-amd64
      - debian-stretch-amd64
      - debian-stretch-arm64
      - ubuntu-arm64

  matrix-test:
    when: << pipeline.parameters.run_matrix >>
    jobs:
      - matrix-test:
          matrix:
            parameters:
              os: [docker, linux, macos, win/default]
              subject: ["World", "Friend", "Baby"]

  build:
    when: << pipeline.parameters.run_tests >>
    jobs:
      - mvxt-test/test-env-interp:
          test-var-one: "String1"
          test-var-two: "String2"
      - test:
          context: mvxt-prod
      - executor-param-test:
          name: test-node-job
          image: "circleci/node:10.15.1"
      - executor-param-test:
          name: test-go-job
          image: "circleci/golang:1.12.4"
      - cache-test
      - db-test
      - dlc-test
      - approve:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: master
      - trigger-deploys:
          requires:
            - approve
          context:
            - circle-api
          filters:
            branches:
              only: master

  deploy:
    when: << pipeline.parameters.deploy >>
    jobs:
      - deploy:
          matrix:
            parameters:
              env: ["AU", "EU", "Int", "Prod", "SA", "SEA"]

##################
# Job Definitions
##################
jobs:
  test:
    executor: docker
    steps:
      - checkout
      - run:
          command: echo $TEST_VAR
      - run:
          command: echo "test_var=$TEST_VAR"
      - run:
          command: |
            cat test.sh
            ./test.sh
      - persist_to_workspace:
          root: .
          paths:
            - test.sh
      - run:
          name: trigger workspace-test
          command: |
            curl -u ${CIRCLE_TOKEN}: -X POST https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              -d '{"branch": "'"${CIRCLE_BRANCH}"'", "parameters": {"run_default": false, "run_workspace_test": true}}'; \

  workspace-test:
    executor: docker
    steps:
      - attach_workspace:
          at: .
      - run: ./test.sh

  dlc-test:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - run: echo "Hello!" && sleep 10
      - run: sudo systemctl stop docker

  executor-param-test:
    parameters:
      image:
        description: "Docker image to use"
        type: string
    docker:
      - image: << parameters.image >>
    steps:
      - run: echo "Hello, world!"

  cache-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}
            - v1-dependencies-
      - run: ./test.sh
      - save_cache:
          key: v1-dependencies-{{ .Branch }}
          paths: ./*

  matrix-test:
    parameters:
      os:
        type: string
      subject:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - run: echo "Hello << parameters.subject >>!"

  db-test:
    executor: db-test
    steps:
      - run: sleep 10 && echo "Hello World!"

  centos7-amd64:
    machine: true
    resource_class: mvxt/centos-runner
    steps:
      - checkout
      - run: echo "Running on a CentOS 7 AMD64 runner!"

  centos8-amd64:
    machine: true
    resource_class: mvxt/centos8
    steps:
      - checkout
      - run: echo "Running on a CentOS 8 AMD64 runner!"

  rhel8-amd64:
    machine: true
    resource_class: mvxt/rhel8
    steps:
      - checkout
      - run: echo "Running on a RHEL 8 AMD64 runner!"

  debian-stretch-amd64:
    machine: true
    resource_class: mvxt/debian-stretch
    steps:
      - checkout
      - run: echo "Running on a Debian 9 (stretch) AMD64 runner!"

  debian-stretch-arm64:
    machine: true
    resource_class: mvxt/debian-arm
    steps:
      - checkout
      - run: echo "Running on a Debian 9 (stretch) Arm64 runner!"

  ubuntu-arm64:
    machine: true
    resource_class: mvxt/ubuntu-arm
    steps:
      - checkout
      - run: echo "Running on an Ubuntu 18.04 Arm64 runner!"

  trigger-deploys:
    executor: docker
    steps:
      - run:
          name: API Calls to trigger deploy workflow for each environment
          command: |
            curl -u ${CIRCLE_TOKEN}: -X POST https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              -d '{"branch": "'"${CIRCLE_BRANCH}"'", "parameters": {"run_tests": false, "deploy": true}}'

  deploy:
    parameters:
      env:
        description: Which environment to deploy to
        type: string
    executor: docker
    steps:
      - checkout
      - run:
          name: Template step
          command: |
            echo "Here is where you'd run relevant commands (e.g., kustomize build, kubectl apply, etc.)"
      - run:
          name: Parameter example
          command: echo "DEPLOYING TO << parameters.env >>"

